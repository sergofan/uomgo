<link rel="import" href="../../bower_components/polymer/polymer.html">

<dom-module id="x-posts">
	<template>
		<style is="custom-style" include="shared-styles">
			:host {
				display: block;
			}
			iron-list {
				/*flex: 1 1 auto;*/
				/*padding-top: 148px;*/
				/*margin-top: 64px;*/
				padding-bottom: 16px;
				--iron-list: {
				};
			}
			.post {
				@apply(--layout-horizontal);
				padding: 20px;
				border-radius: 8px;
				background-color: white;
				border: 1px solid #ddd;
				max-width: 800px;
				margin: 16px auto 0 auto;
			}
			.post:focus {
				outline: 0;
				border-color: #333;
			}
			.avatar {
				height: 40px;
				width: 40px;
				border-radius: 20px;
				box-sizing: border-box;
				background-color: #DDD;
			}
			.pad {
				padding: 0 16px;
				@apply(--layout-flex);
				@apply(--layout-vertical);
			}
			.primary {
				font-size: 16px;
				font-weight: bold;
			}
			.secondary {
				font-size: 14px;
			}
			.dim {
				color: gray;
			}
		</style>

		<firebase-query id="firebaseQueryPosts"
										path="/posts"
										app-name="uomgo"
										order-by-child="date"
										start-at="{{startAt}}"
										end-at="{{endAt}}"
										limit-to-first="[[limitToFirst]]"
										limit-to-last="[[limitToLast]]"
										order-by-child="date"
										data="{{dataDB}}"></firebase-query>

		<array-filter
				items="[[dataDB]]"
				filtered="{{filtered}}"
				sort="_computeSort"
				filter="_filter"></array-filter>

<!--
		<array-filter
				items="[[dataDB]]"
				filtered="{{filtered}}"></array-filter>
 -->
		<iron-list class="red-gradient" id="list" items="[[filtered]]" as="post" scroll-target="document">
			<template>
				<div>
					<div class="post" tabindex$="[[tabIndex]]">
						<div class="pad">
							<div class="primary">[[post.name]] [[index]]</div>
							<div class="secondary dim">[[post.text]]</div>
						</div>
					</div>
				</div>
			</template>
		</iron-list>

	</template>
	<script>
	(function() {
		'use strict';

			Polymer({
				is: 'x-posts',
				behaviors: [
					Polymer.NeonAnimationRunnerBehavior
				],
				properties: {
					animationConfig: {
						value: function() {
							return {
								'entry': [{
									name: 'cascaded-animation',
									animation: 'scale-up-animation',
									node: this,
									nodeDelay: 50,
									timing: {
										duration: 150,
										delay: 0
									}
								}]
							};
						}
					},
					user: {
						type: Object
					},
					limitToLast: {
						type: Number,
						notify: true
					},
					limitToFirst: {
						type: Number,
						notify: true,
					},
					startAt: {
						type: String,
						notify: true
					},
					endAt: {
						type: String,
						notify: true,
					}
				},

				ready: function() {
					// this.$.list.scrollTarget = this.ownerDocument.documentElement;
				},

				_computeSort: function(a, b) {
					if (a.date == b.date) {
						return 0;
					}
					return a.date > b.date ? -1 : 1;
				},

				_filter: function(item) {
					var todayDate = new Date();
					var todayMM = todayDate.getMonth()+1; //January is 0!
					var todayYYYY = todayDate.getFullYear();
					var itemDate = new Date(item.date);
					var itemMM = itemDate.getMonth()+1;
					var itemYYYY = itemDate.getFullYear();

					if ( itemYYYY === todayYYYY && itemMM > 8  ) {
						return true;
					};
				},

				_renderRepeat: function () {
					var xPostItems = Polymer.dom(this.root).querySelectorAll('x-post-item');
					this.animationConfig['entry'][0].nodes = Array.prototype.slice.call(xPostItems);
					this.playAnimation('entry');
				},

				play: function() {
					this.playAnimation('entry');
				},

				attached: function() {
					// Use the document element
					// this.$.list.scrollTarget = this.ownerDocument.documentElement;
				},

				iconForItem: function(item) {
					return item ? (item.integer < 50 ? 'star-border' : 'star') : '';
				},

				getClassForItem: function(item, selected) {
					return selected ? 'item expanded' : 'item';
				}

			});
	})();
	</script>
</dom-module>
